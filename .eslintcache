[{"E:\\Files\\Works\\React Project\\covid-19-tracker\\src\\index.js":"1","E:\\Files\\Works\\React Project\\covid-19-tracker\\src\\App.js":"2","E:\\Files\\Works\\React Project\\covid-19-tracker\\src\\components\\main\\TopBar.js":"3","E:\\Files\\Works\\React Project\\covid-19-tracker\\src\\components\\main\\InfoCards.js":"4","E:\\Files\\Works\\React Project\\covid-19-tracker\\src\\components\\main\\Map.js":"5","E:\\Files\\Works\\React Project\\covid-19-tracker\\src\\components\\main\\InfoCard.js":"6","E:\\Files\\Works\\React Project\\covid-19-tracker\\src\\utilities.js":"7","E:\\Files\\Works\\React Project\\covid-19-tracker\\src\\components\\sideinfo\\LiveCasesList.js":"8"},{"size":225,"mtime":1610163464793,"results":"9","hashOfConfig":"10"},{"size":5770,"mtime":1610335183242,"results":"11","hashOfConfig":"10"},{"size":1050,"mtime":1610251313648,"results":"12","hashOfConfig":"10"},{"size":1761,"mtime":1610267968296,"results":"13","hashOfConfig":"10"},{"size":2605,"mtime":1610336431428,"results":"14","hashOfConfig":"10"},{"size":3628,"mtime":1610268018085,"results":"15","hashOfConfig":"10"},{"size":112,"mtime":1610204998159,"results":"16","hashOfConfig":"10"},{"size":623,"mtime":1610332623763,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"7dd73t",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"E:\\Files\\Works\\React Project\\covid-19-tracker\\src\\index.js",[],["39","40"],"E:\\Files\\Works\\React Project\\covid-19-tracker\\src\\App.js",["41"],"import React, { useState, useEffect } from 'react';\nimport InfoCards from './components/main/InfoCards';\nimport TopBar from './components/main/TopBar';\nimport Map from './components/main/Map';\nimport LiveCasesList from './components/sideinfo/LiveCasesList';\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [countriesInfo, setCountriesInfo] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState('global');\n  const [globalInfo, setGlobalInfo] = useState({});\n  const [selectedCountryHistory, setSelectedCountryHistory] = useState([]);\n  const [selectedCountryInfo, setSelectedCountryInfo] = useState({});\n  const [selectedType, setSelectedType] = useState('confirmed');\n\n  const colors = {\n    confirmed: '#cf2828',\n    active: '#3571FE',\n    recovered: '#0ADB49',\n    deaths: '#848383',\n  };\n\n  // Calculate Today's incremented Active\n  const calculateTodayActive = (\n    active,\n    cases,\n    deaths,\n    recovered,\n    todayCases,\n    todayDeaths,\n    todayRecovered\n  ) => {\n    const yesterdayCases = cases - todayCases;\n    const yesterdayDeaths = deaths - todayDeaths;\n    const yesterdayRecovered = recovered - todayRecovered;\n    const yesterdayActive =\n      yesterdayCases - (yesterdayDeaths + yesterdayRecovered);\n\n    return active - yesterdayActive;\n  };\n\n  // Set Countries name, Countries info\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/countries')\n      .then((res) => res.json())\n      .then((datas) => {\n        // Set Countries name\n        setCountries(datas.map((data) => data.country));\n        // Set Countries info\n        setCountriesInfo(\n          datas.map((data) => {\n            const {\n              country,\n              cases,\n              todayCases,\n              deaths,\n              todayDeaths,\n              recovered,\n              todayRecovered,\n              active,\n              countryInfo,\n              tests,\n            } = data;\n\n            return {\n              country,\n              deaths,\n              todayDeaths,\n              recovered,\n              todayRecovered,\n              active,\n              tests,\n              lat: countryInfo.lat,\n              long: countryInfo.long,\n              flag: countryInfo.flag,\n              confirmed: cases,\n              todayConfirmed: todayCases,\n              todayActive: calculateTodayActive(\n                active,\n                cases,\n                deaths,\n                recovered,\n                todayCases,\n                todayDeaths,\n                todayRecovered\n              ),\n            };\n          })\n        );\n      });\n  }, []);\n\n  // Set Global Info\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all')\n      .then((res) => res.json())\n      .then((data) => {\n        const {\n          cases,\n          todayCases,\n          deaths,\n          todayDeaths,\n          recovered,\n          todayRecovered,\n          active,\n          tests,\n        } = data;\n        setGlobalInfo({\n          country: 'global',\n          lat: 0,\n          long: 0,\n          confirmed: cases,\n          todayConfirmed: todayCases,\n          deaths,\n          todayDeaths,\n          recovered,\n          todayRecovered,\n          active,\n          tests,\n          todayActive: calculateTodayActive(\n            active,\n            cases,\n            deaths,\n            recovered,\n            todayCases,\n            todayDeaths,\n            todayRecovered\n          ),\n        });\n      });\n  }, []);\n\n  // Set Countries' SelectedCountryHistory\n  useEffect(() => {\n    let country = selectedCountry === 'global' ? 'all' : selectedCountry;\n\n    fetch(`https://disease.sh/v3/covid-19/historical/${country}`)\n      .then((res) => res.json())\n      .then((datas) => {\n        if (country === 'all') {\n          setSelectedCountryHistory({ country: 'global', ...datas });\n        } else {\n          setSelectedCountryHistory({\n            country: datas.country,\n            ...datas.timeline,\n          });\n        }\n      });\n  }, [selectedCountry]);\n\n  // Update Selected country info when selected country change\n  useEffect(() => {\n    const found = countriesInfo.find(\n      (country) =>\n        country.country.toLowerCase() === selectedCountry.toLowerCase()\n    );\n    setSelectedCountryInfo(found);\n  }, [selectedCountry]);\n\n  useEffect(() => {\n    if (countriesInfo.length) {\n      // Sort Countries by selected Type in descending order\n      setCountriesInfo(\n        countriesInfo.sort((a, b) => b[selectedType] - a[selectedType])\n      );\n    }\n  }, [selectedType, countriesInfo]);\n\n  return (\n    <div className='app'>\n      <div className='app__container'>\n        <section className='app-container__main'>\n          <TopBar\n            countries={countries}\n            setSelectedCountry={setSelectedCountry}\n            tests={\n              selectedCountry === 'global'\n                ? globalInfo.tests\n                : selectedCountryInfo?.tests\n            }\n          />\n          <InfoCards\n            selectedCountry={selectedCountry}\n            globalInfo={globalInfo}\n            selectedCountryInfo={selectedCountryInfo}\n            history={selectedCountryHistory}\n            colors={colors}\n            setSelectedType={setSelectedType}\n          />\n          <Map\n            countriesInfo={countriesInfo}\n            selectedType={selectedType}\n            colors={colors}\n            selectedCountry={selectedCountry}\n          />\n        </section>\n        <section className='app-container__sideInfo'>\n          <LiveCasesList countriesInfo={countriesInfo} />\n        </section>\n      </div>\n\n      <footer className='app__footer'>\n        <div>Web Designed by Rabin</div>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","E:\\Files\\Works\\React Project\\covid-19-tracker\\src\\components\\main\\TopBar.js",[],"E:\\Files\\Works\\React Project\\covid-19-tracker\\src\\components\\main\\InfoCards.js",[],"E:\\Files\\Works\\React Project\\covid-19-tracker\\src\\components\\main\\Map.js",["42","43"],"import React, { useEffect, useState } from 'react';\r\nimport { MapContainer, TileLayer, CircleMarker, Popup } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport numeral from 'numeral';\r\n\r\nfunction Map({ selectedType, countriesInfo, colors, selectedCountry }) {\r\n  const extraRadius = 5;\r\n\r\n  return (\r\n    <div id='main__map'>\r\n      <MapContainer\r\n        center={[51, 10]}\r\n        zoom={4}\r\n        minZoom={3}\r\n        maxZoom={5}\r\n        style={mapStyle}\r\n        scrollWheelZoom={false}>\r\n        <TileLayer url='https://api.maptiler.com/maps/topo/{z}/{x}/{y}.png?key=dBTQT86fZ9yGbJ9NrdnP' />\r\n\r\n        {countriesInfo.map((countryInfo, index) => {\r\n          let radius =\r\n            parseInt(\r\n              (countryInfo[selectedType] / countriesInfo[0][selectedType]) * 100\r\n            ) + extraRadius;\r\n\r\n          radius = radius > 100 + extraRadius ? 0 : radius;\r\n\r\n          return (\r\n            <CircleMarker\r\n              center={[countryInfo.lat, countryInfo.long]}\r\n              radius={isNaN(radius) ? 0 : radius}\r\n              pathOptions={{\r\n                color: colors[selectedType],\r\n              }}\r\n              key={`country-map-circle-${index}`}>\r\n              <Popup>\r\n                {/* Flag */}\r\n                <img src={countryInfo.flag} alt='' style={flagStyle} />\r\n                {/* Country name */}\r\n                <h2>{countryInfo.country}</h2>\r\n                <p style={{ fontSize: '1.3em', lineHeight: '1.5em' }}>\r\n                  {/* Confirmed cases */}\r\n                  <strong>Confirmed: </strong>\r\n                  {numeral(countryInfo.confirmed).format('0.0a').toUpperCase()}\r\n                  <br />\r\n                  {/* Active Cases */}\r\n                  <strong>Active: </strong>\r\n                  {numeral(countryInfo.active)\r\n                    .format('0.0a')\r\n                    .toUpperCase()}{' '}\r\n                  <br />\r\n                  {/* Recovered */}\r\n                  <strong>Recovered: </strong>\r\n                  {numeral(countryInfo.recovered).format('0.0a').toUpperCase()}\r\n                  <br />\r\n                  {/* Deaths cases */}\r\n                  <strong>Deaths: </strong>\r\n                  {numeral(countryInfo.deaths).format('0.0a').toUpperCase()}\r\n                </p>\r\n              </Popup>\r\n            </CircleMarker>\r\n          );\r\n        })}\r\n      </MapContainer>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStyle = {\r\n  width: '100%',\r\n  height: '500px',\r\n  // borderRadius: '12px',\r\n};\r\n\r\nconst flagStyle = {\r\n  objectFit: 'contain',\r\n  width: '100%',\r\n};\r\n\r\nexport default Map;\r\n","E:\\Files\\Works\\React Project\\covid-19-tracker\\src\\components\\main\\InfoCard.js",["44"],"import React from 'react';\r\nimport { motion, animate } from 'framer-motion';\r\nimport { Sparklines, SparklinesSpots, SparklinesLine } from 'react-sparklines';\r\nimport { capitalize } from '../../utilities';\r\nimport numeral from 'numeral';\r\n\r\nfunction InfoCard({\r\n  color,\r\n  typeName,\r\n  animateCardStyle,\r\n  setAnimateCardStyle,\r\n  cardNumber,\r\n  info,\r\n  history,\r\n  setSelectedType,\r\n}) {\r\n  const changeAnimateCardStyle = () => {\r\n    // Change Animate Card style\r\n    setAnimateCardStyle({\r\n      backgroundColor: color,\r\n      transform: `translateX(${cardNumber * 100}%)`,\r\n    });\r\n  };\r\n\r\n  // Get Active History\r\n  const getActiveHistory = () => {\r\n    const confirmedHistory = Object.values(history.cases || {});\r\n    const deathsHistory = Object.values(history.deaths || {});\r\n    const recoveredHistory = Object.values(history.recovered || {});\r\n    // // Calculate active history from each data of confirmed, deaths & recovered history\r\n    const activeHistory = confirmedHistory.map((c, index) => {\r\n      return c - (recoveredHistory[index] + deathsHistory[index]);\r\n    });\r\n\r\n    return activeHistory;\r\n  };\r\n\r\n  // Get historical data of current data type - confirmed, active,\r\n  // recovered, deaths.\r\n  const getHistoricalData = () => {\r\n    let dataType = typeName === 'confirmed' ? 'cases' : typeName.toLowerCase();\r\n\r\n    // history object has cases, deaths & recovered properties but not active\r\n    // So we have to check for active type also.\r\n    if (history[dataType] || typeName === 'active') {\r\n      // if history[dataType] is undefined, then it's active type\r\n      const values = history[dataType]\r\n        ? Object.values(history[dataType])\r\n        : getActiveHistory();\r\n\r\n      const maxValue = values.sort((a, b) => b - a)[0];\r\n      const result = [];\r\n\r\n      // For each value, get the percentage of value with respect to the\r\n      // highest value of the data and push it to the result array\r\n      values.forEach((val) => result.push(~~((val / maxValue) * 100)));\r\n\r\n      return result;\r\n    } else {\r\n      return [];\r\n    }\r\n  };\r\n\r\n  // Get Today's incremented value i.e. incremented cases, death, active & recovered\r\n  const getTodayIncremented = () => {\r\n    if (info) {\r\n      const value = info[`today${capitalize(typeName)}`];\r\n      return value > 0 ? numeral(value).format('+0,0') : '+0';\r\n    }\r\n    return '+0';\r\n  };\r\n\r\n  return (\r\n    <section\r\n      className={`info-card`}\r\n      style={{ color: color }}\r\n      onClick={() => {\r\n        changeAnimateCardStyle();\r\n        setSelectedType(typeName);\r\n      }}>\r\n      {/* Animate card show if animateStyle is defined */}\r\n      {animateCardStyle ? (\r\n        <motion.div\r\n          className='animate-card'\r\n          animate={animateCardStyle}></motion.div>\r\n      ) : (\r\n        ''\r\n      )}\r\n\r\n      {/* Card infomations */}\r\n      <strong className='info-card__name'>{typeName}</strong>\r\n      <p className='info-card__incremented'>{getTodayIncremented()}</p>\r\n      <p className='info-card__main-value'>\r\n        {info ? numeral(info[typeName]).format('0, 0') : ''}\r\n      </p>\r\n      <div className='graph'>\r\n        <Sparklines\r\n          data={getHistoricalData()}\r\n          limit={getHistoricalData().length}\r\n          style={{ width: '100%' }}\r\n          width={40}\r\n          height={30}\r\n          margin={6}>\r\n          <SparklinesLine\r\n            color={color}\r\n            style={{ strokeWidth: 1, fill: 'none' }}\r\n          />\r\n          <SparklinesSpots size={1} style={{ stroke: color, fill: 'white' }} />\r\n        </Sparklines>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default InfoCard;\r\n","E:\\Files\\Works\\React Project\\covid-19-tracker\\src\\utilities.js",[],["45","46"],"E:\\Files\\Works\\React Project\\covid-19-tracker\\src\\components\\sideinfo\\LiveCasesList.js",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":158,"column":6,"nodeType":"53","endLine":158,"endColumn":23,"suggestions":"54"},{"ruleId":"55","severity":1,"message":"56","line":1,"column":17,"nodeType":"57","messageId":"58","endLine":1,"endColumn":26},{"ruleId":"55","severity":1,"message":"59","line":1,"column":28,"nodeType":"57","messageId":"58","endLine":1,"endColumn":36},{"ruleId":"55","severity":1,"message":"60","line":2,"column":18,"nodeType":"57","messageId":"58","endLine":2,"endColumn":25},{"ruleId":"47","replacedBy":"61"},{"ruleId":"49","replacedBy":"62"},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'countriesInfo'. Either include it or remove the dependency array.","ArrayExpression",["65"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'animate' is defined but never used.",["63"],["64"],"no-global-assign","no-unsafe-negation",{"desc":"66","fix":"67"},"Update the dependencies array to be: [countriesInfo, selectedCountry]",{"range":"68","text":"69"},[4315,4332],"[countriesInfo, selectedCountry]"]